# .github/workflows/release.yml

# 1. Workflow 的名称
name: Release Go Binaries

# 2. 触发条件：当一个以 'v' 开头的标签被推送到仓库时
on:
  push:
    tags:
      - 'v*'

# 3. 权限设置：允许 Workflow 向你的 Release 写入文件
permissions:
  contents: write

# 4. 定义一个名为 'build' 的任务 (Job)
jobs:
  build:
    # 任务运行的环境：最新的 Ubuntu 系统
    runs-on: ubuntu-latest

    # 任务的步骤
    steps:
      # 步骤一：检出代码
      # 使用 'actions/checkout@v4' 这个官方的 action 来获取你的源代码
      - name: Checkout code
        uses: actions/checkout@v4

      # 步骤二：设置 Go 环境
      # 使用 'actions/setup-go@v5' 这个官方的 action 来安装 Go
      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.22' # 你可以指定一个 Go 版本

      # 步骤三：执行交叉编译
      # 'run' 关键字后面可以跟任何 shell 命令
      - name: Build cross-platform binaries
        run: |
          # 创建一个用于存放构建产物的目录
          mkdir builds
          # Linux
          GOOS=linux GOARCH=amd64 go build -ldflags="-s -w" -o builds/media-sorter_linux_amd64
          # Windows
          GOOS=windows GOARCH=amd64 go build -ldflags="-s -w" -o builds/media-sorter_windows_amd64.exe
          # macOS (Intel)
          GOOS=darwin GOARCH=amd64 go build -ldflags="-s -w" -o builds/media-sorter_macos_amd64
          # macOS (Apple Silicon)
          GOOS=darwin GOARCH=arm64 go build -ldflags="-s -w" -o builds/media-sorter_macos_arm64
          # 将配置文件也复制进去
          cp config.json builds/

      # 步骤四：创建 Release 并上传构建产物
      # 使用 'softprops/action-gh-release@v1' 这个非常流行的第三方 action
      - name: Create Release and Upload Assets
        uses: softprops/action-gh-release@v1
        with:
          # 将 builds/ 目录下的所有文件都作为发布资产上传
          files: builds/*
